syntax = "proto3";

package api.showonce.v1;

option java_package = "com.showonce.v1";
option java_multiple_files = true;
option java_outer_classname = "ShowOnceProto";

option go_package = "github.com/LeKovr/showonce/proto;showonce";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

service PublicService {
  // вернуть метаданные секрета по id
  rpc GetMetadata(ItemId) returns (ItemMeta) {
    option (google.api.http) = {
      get: "/api/item"
    };
  }
  // вернуть текст секрета по id
  rpc GetData(ItemId) returns (ItemData) {
    option (google.api.http) = {
      post: "/api/item/{id}"
    };
  }
}

// Private
service PrivateService {
  // создать секрет
  rpc NewItem(NewItemRequest) returns (ItemId){
    option (google.api.http) = {
      post: "/my/api/new"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            security: {
                security_requirement: {
                    key: "OAuth2";
                    value: {
                        scope: "read";
                        scope: "write";
                    }
                }
            }
    };
  }

  // вернуть список своих секретов
  rpc GetItems(google.protobuf.Empty) returns (ItemList) {
    option (google.api.http) = {
      get: "/my/api/items"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            security: {
                security_requirement: {
                    key: "OAuth2";
                    value: {
                        scope: "read";
                        scope: "write";
                    }
                }
            }
    };
  }

  // общая статистика по количеству секретов
  rpc GetStats(google.protobuf.Empty) returns (StatsResponse) {
    option (google.api.http) = {
      get: "/my/api/stat"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            security: {
                security_requirement: {
                    key: "OAuth2";
                    value: {
                        scope: "read";
                        scope: "write";
                    }
                }
            }
    };
  }
}

// Статус секрета
enum ItemStatus {
	// A Standard tournament
	UNKNOWN = 0;
	// Готово к прочтению
	WAIT = 1;
	// Прочитано
	READ = 2;
	// Истек срок актуальности
	EXPIRED = 3;
	// Удалено
	CLEARED = 4;
  }
  
// Идентификатор (ULID)
message ItemId { string id = 1; }

// Аргументы запроса на создание
message NewItemRequest {
	string title  = 1;      // описание
	string group  = 2;      // идентификатор для группировки
	string expire = 3;      // срок актуальности
	string expire_unit = 4; // единица срока актуальности ("d" - день, остальные варианты - как в go: "ns", "us" (or "µs"), "ms", "s", "m", "h")
	string data   = 5;      // текст секрета, удаляется после первого показа
}

// Данные секрета
message ItemData {
	string data = 1; // Данные секрета
}

// Метаданные секрета
message ItemMeta {
	string title = 1;      // описание
	string group = 2;      // идентификатор для группировки
	string owner = 3;      // автор
	ItemStatus status = 4; // статус
	google.protobuf.Timestamp created_at = 5; // момент создания
	google.protobuf.Timestamp modified_at = 6; // первоначально - срок автоудаления, после показа - момент показа
}

// Метаданные секрета с идентификатором
message ItemMetaWithId {
	string id     = 1; // идентификатор
	ItemMeta meta = 2; // метаданные
}

// Список секретов
message ItemList {
	repeated ItemMetaWithId items = 1; // Список секретов
}

// Статистика по секретам
message Stats {
	int32 total=1;   // Всего в хранилище
	int32 wait=2;    // Готово к прочтению
	int32 read=3;    // Прочитано
	int32 expired=4; // Истек срок актуальности
}

// Ответ на запрос статистика
message StatsResponse {
	Stats my =1;    // Данные по текущему пользователю
	Stats other =2; // Данные по остальным пользователям
}

