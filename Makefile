## showonce Makefile:
## show secret once
#:
SHELL          = /bin/sh
GO            ?= go
CFG           ?= .env
PRG           ?= $(shell basename $$PWD)

SOURCES        = $(shell find . -maxdepth 3 -mindepth 1 -path ./var -prune -o -name '*.go')

# do not include docker-compose.yml from dcape
# docker-compose can't build docker image if it included
DCAPE_DC_USED  = false

VERSION       ?= $(shell git describe --tags --always)
# Last project tag
RELEASE       ?= $(shell git describe --tags --abbrev=0)

APP_ROOT      ?= .
APP_SITE      ?= $(PRG).dev.lan
APP_PROTO     ?= http

IMAGE         ?= $(PRG)
IMAGE_VER     ?= latest

AS_TYPE       ?= gitea
AS_HOST       ?= http://gitea:8080
AS_TEAM       ?= dcape
AS_CLIENT_ID  ?= you_should_get_id_from_as
AS_CLIENT_KEY ?= you_should_get_key_from_as

AS_COOKIE_SIGN_KEY   ?= $(shell < /dev/urandom tr -dc A-Za-z0-9 | head -c32; echo)
AS_COOKIE_CRYPT_KEY  ?= $(shell < /dev/urandom tr -dc A-Za-z0-9 | head -c32; echo)

# Hardcoded in docker-compose.yml service name
DC_SERVICE    ?= app

# docker app for change inside containers
DOCKER_BIN    ?= docker

# Docker-compose project name (container name prefix)
PROJECT_NAME  ?= $(PRG)

# dcape network connect to, must be set in .env
DCAPE_NET     ?= dcape_default

# ------------------------------------------------------------------------------
# .env template (custom part)
# inserted in .env.sample via 'make config'
define CONFIG_CUSTOM
# ------------------------------------------------------------------------------
# app custom config, generated by make config

APP_PROTO=$(APP_PROTO)

AS_TYPE=$(AS_TYPE)
AS_HOST=$(AS_HOST)
AS_TEAM=$(AS_TEAM)
AS_CLIENT_ID=$(AS_CLIENT_ID)
AS_CLIENT_KEY=$(AS_CLIENT_KEY)
AS_COOKIE_SIGN_KEY=$(AS_COOKIE_SIGN_KEY)
AS_COOKIE_CRYPT_KEY=$(AS_COOKIE_CRYPT_KEY)

# dcape network connect to, must be set in .env
DCAPE_NET=$(DCAPE_NET)

endef

.PHONY: dep build run lint test clean

# ------------------------------------------------------------------------------
## Compile operations
#:

$(PRG): $(SOURCES)
	$(GO) build -ldflags "-X main.version=$(VERSION)" ./cmd/$(PRG)

run: $(PRG)
	@echo Open http://$(APP_SITE):8080
	./$(PRG) --root static --log.debug --as.cookie_name showonce

## Format go sources
fmt:
	$(GO) fmt ./...

## Run vet
vet:
	$(GO) vet ./...

## Run linter
lint:
	golint ./...

## Run more linters
lint-more:
	golangci-lint run ./...

## Run tests
test: coverage.out

## Run tests and fill coverage.out
cov: coverage.out

# internal target
coverage.out: $(SOURCES)
	GIN_MODE=release $(GO) test -test.v -test.race -coverprofile=$@ -covermode=atomic ./...

## Open coverage report in browser
cov-html: cov
	$(GO) tool cover -html=coverage.out

## Clean coverage report
cov-clean:
	rm -f coverage.*

## Changes from last tag
changelog:
	@echo Changes since $(RELEASE)
	@echo
	@git log $(RELEASE)..@ --pretty=format:"* %s"

# ------------------------------------------------------------------------------
## Docker operations
#:

docker: $(PRG)
	docker build -t $(PRG) .

# ------------------------------------------------------------------------------


## Build docker image
docker-build: CMD="build --no-cache --force-rm $(DC_SERVICE)"
docker-build: dc

## Remove docker image & temp files
docker-clean:
	[ "$$($(DOCKER_BIN) images -q $(DC_IMAGE) 2> /dev/null)" = "" ] || $(DOCKER_BIN) rmi $(DC_IMAGE)


clean: ## Remove previous builds
	@rm -f $(PRG)


# ------------------------------------------------------------------------------
# Find and include DCAPE/apps/drone/dcape-app/Makefile
DCAPE_COMPOSE   ?= dcape-compose
DCAPE_MAKEFILE  ?= $(shell docker inspect -f "{{.Config.Labels.dcape_app_makefile}}" $(DCAPE_COMPOSE))
ifeq ($(shell test -e $(DCAPE_MAKEFILE) && echo -n yes),yes)
  include $(DCAPE_MAKEFILE)
else
  include /opt/dcape-app/Makefile
endif
