// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/service.proto

package showonce

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ItemId with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ItemId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ItemId with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ItemIdMultiError, or nil if none found.
func (m *ItemId) ValidateAll() error {
	return m.validate(true)
}

func (m *ItemId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return ItemIdMultiError(errors)
	}

	return nil
}

// ItemIdMultiError is an error wrapping multiple validation errors returned by
// ItemId.ValidateAll() if the designated constraints aren't met.
type ItemIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ItemIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ItemIdMultiError) AllErrors() []error { return m }

// ItemIdValidationError is the validation error returned by ItemId.Validate if
// the designated constraints aren't met.
type ItemIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ItemIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ItemIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ItemIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ItemIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ItemIdValidationError) ErrorName() string { return "ItemIdValidationError" }

// Error satisfies the builtin error interface
func (e ItemIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sItemId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ItemIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ItemIdValidationError{}

// Validate checks the field values on NewItemRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NewItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NewItemRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NewItemRequestMultiError,
// or nil if none found.
func (m *NewItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *NewItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for Group

	// no validation rules for Expire

	// no validation rules for ExpireUnit

	// no validation rules for Data

	if len(errors) > 0 {
		return NewItemRequestMultiError(errors)
	}

	return nil
}

// NewItemRequestMultiError is an error wrapping multiple validation errors
// returned by NewItemRequest.ValidateAll() if the designated constraints
// aren't met.
type NewItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NewItemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NewItemRequestMultiError) AllErrors() []error { return m }

// NewItemRequestValidationError is the validation error returned by
// NewItemRequest.Validate if the designated constraints aren't met.
type NewItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NewItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NewItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NewItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NewItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NewItemRequestValidationError) ErrorName() string { return "NewItemRequestValidationError" }

// Error satisfies the builtin error interface
func (e NewItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNewItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NewItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NewItemRequestValidationError{}

// Validate checks the field values on ItemData with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ItemData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ItemData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ItemDataMultiError, or nil
// if none found.
func (m *ItemData) ValidateAll() error {
	return m.validate(true)
}

func (m *ItemData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return ItemDataMultiError(errors)
	}

	return nil
}

// ItemDataMultiError is an error wrapping multiple validation errors returned
// by ItemData.ValidateAll() if the designated constraints aren't met.
type ItemDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ItemDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ItemDataMultiError) AllErrors() []error { return m }

// ItemDataValidationError is the validation error returned by
// ItemData.Validate if the designated constraints aren't met.
type ItemDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ItemDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ItemDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ItemDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ItemDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ItemDataValidationError) ErrorName() string { return "ItemDataValidationError" }

// Error satisfies the builtin error interface
func (e ItemDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sItemData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ItemDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ItemDataValidationError{}

// Validate checks the field values on ItemMeta with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ItemMeta) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ItemMeta with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ItemMetaMultiError, or nil
// if none found.
func (m *ItemMeta) ValidateAll() error {
	return m.validate(true)
}

func (m *ItemMeta) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for Group

	// no validation rules for Owner

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ItemMetaValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ItemMetaValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ItemMetaValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetModifiedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ItemMetaValidationError{
					field:  "ModifiedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ItemMetaValidationError{
					field:  "ModifiedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetModifiedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ItemMetaValidationError{
				field:  "ModifiedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ItemMetaMultiError(errors)
	}

	return nil
}

// ItemMetaMultiError is an error wrapping multiple validation errors returned
// by ItemMeta.ValidateAll() if the designated constraints aren't met.
type ItemMetaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ItemMetaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ItemMetaMultiError) AllErrors() []error { return m }

// ItemMetaValidationError is the validation error returned by
// ItemMeta.Validate if the designated constraints aren't met.
type ItemMetaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ItemMetaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ItemMetaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ItemMetaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ItemMetaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ItemMetaValidationError) ErrorName() string { return "ItemMetaValidationError" }

// Error satisfies the builtin error interface
func (e ItemMetaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sItemMeta.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ItemMetaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ItemMetaValidationError{}

// Validate checks the field values on ItemMetaWithId with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ItemMetaWithId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ItemMetaWithId with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ItemMetaWithIdMultiError,
// or nil if none found.
func (m *ItemMetaWithId) ValidateAll() error {
	return m.validate(true)
}

func (m *ItemMetaWithId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetMeta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ItemMetaWithIdValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ItemMetaWithIdValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ItemMetaWithIdValidationError{
				field:  "Meta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ItemMetaWithIdMultiError(errors)
	}

	return nil
}

// ItemMetaWithIdMultiError is an error wrapping multiple validation errors
// returned by ItemMetaWithId.ValidateAll() if the designated constraints
// aren't met.
type ItemMetaWithIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ItemMetaWithIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ItemMetaWithIdMultiError) AllErrors() []error { return m }

// ItemMetaWithIdValidationError is the validation error returned by
// ItemMetaWithId.Validate if the designated constraints aren't met.
type ItemMetaWithIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ItemMetaWithIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ItemMetaWithIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ItemMetaWithIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ItemMetaWithIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ItemMetaWithIdValidationError) ErrorName() string { return "ItemMetaWithIdValidationError" }

// Error satisfies the builtin error interface
func (e ItemMetaWithIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sItemMetaWithId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ItemMetaWithIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ItemMetaWithIdValidationError{}

// Validate checks the field values on ItemList with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ItemList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ItemList with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ItemListMultiError, or nil
// if none found.
func (m *ItemList) ValidateAll() error {
	return m.validate(true)
}

func (m *ItemList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ItemListValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ItemListValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ItemListValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ItemListMultiError(errors)
	}

	return nil
}

// ItemListMultiError is an error wrapping multiple validation errors returned
// by ItemList.ValidateAll() if the designated constraints aren't met.
type ItemListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ItemListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ItemListMultiError) AllErrors() []error { return m }

// ItemListValidationError is the validation error returned by
// ItemList.Validate if the designated constraints aren't met.
type ItemListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ItemListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ItemListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ItemListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ItemListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ItemListValidationError) ErrorName() string { return "ItemListValidationError" }

// Error satisfies the builtin error interface
func (e ItemListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sItemList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ItemListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ItemListValidationError{}

// Validate checks the field values on Stats with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Stats) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Stats with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in StatsMultiError, or nil if none found.
func (m *Stats) ValidateAll() error {
	return m.validate(true)
}

func (m *Stats) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	// no validation rules for Wait

	// no validation rules for Read

	// no validation rules for Expired

	if len(errors) > 0 {
		return StatsMultiError(errors)
	}

	return nil
}

// StatsMultiError is an error wrapping multiple validation errors returned by
// Stats.ValidateAll() if the designated constraints aren't met.
type StatsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatsMultiError) AllErrors() []error { return m }

// StatsValidationError is the validation error returned by Stats.Validate if
// the designated constraints aren't met.
type StatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatsValidationError) ErrorName() string { return "StatsValidationError" }

// Error satisfies the builtin error interface
func (e StatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatsValidationError{}

// Validate checks the field values on StatsResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StatsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StatsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StatsResponseMultiError, or
// nil if none found.
func (m *StatsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StatsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StatsResponseValidationError{
					field:  "My",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StatsResponseValidationError{
					field:  "My",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StatsResponseValidationError{
				field:  "My",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOther()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StatsResponseValidationError{
					field:  "Other",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StatsResponseValidationError{
					field:  "Other",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOther()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StatsResponseValidationError{
				field:  "Other",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StatsResponseMultiError(errors)
	}

	return nil
}

// StatsResponseMultiError is an error wrapping multiple validation errors
// returned by StatsResponse.ValidateAll() if the designated constraints
// aren't met.
type StatsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatsResponseMultiError) AllErrors() []error { return m }

// StatsResponseValidationError is the validation error returned by
// StatsResponse.Validate if the designated constraints aren't met.
type StatsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatsResponseValidationError) ErrorName() string { return "StatsResponseValidationError" }

// Error satisfies the builtin error interface
func (e StatsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatsResponseValidationError{}
